sampler2D mainTex < string texture = ":thisframe"; >;

float2 res < string parameter = "resolution"; >;

float2 rcpres < string parameter = "resolution_rcp"; > = 
{ 
	0.1f, 
	0.1f
};

float4x4 viewMatrix < string parameter = "matrix_view"; >;

struct VertexStruct
{
    float4 pos : POSITION;
    float4 color : COLOR;
    float4 uv : TEXCOORD0;
    float4 data : TEXCOORD1;
};

struct ProcessedVertex
{
    float4 pos : POSITION;
    float4 color : COLOR;
    float4 uv : TEXCOORD0;
};

const float3 zero = { 0.00f, 0.00f, 0.00f };
const float3 lum  = { 0.27f, 0.67f, 0.06f };

float findLum(float3 val)
{
	float3 mod = val * lum;
	return ( mod.r + mod.g + mod.b );
}

void partialInvert(in float2 uv : TEXCOORD0, out float4 color : COLOR0)
{	
	color = tex2D(mainTex, uv);
	
	if ( uv.x < 0.5 )
	{
		color.rgb = float3(1.0, 1.0, 1.0) - color.rgb;
	}

	color.a = 1.0f;
}

void redScreen(in float2 uv : TEXCOORD0, out float4 color : COLOR0)
{
	color = float4(1.0f, 0.0f, 0.0f, 1.0f);
}

void copyVert(in VertexStruct vert, out ProcessedVertex overt)
{
    overt.pos = vert.pos;
    overt.color = float4(1.0, vert.color.gb, 1.0);
    overt.uv = vert.uv;
}

technique main 
{
	pass p0
	{
        VertexProgram = compile latest copyVert();
		FragmentProgram = compile latest partialInvert();
	}
}

technique alternate
{
	pass p0
	{
        VertexProgram = compile latest copyVert();
		FragmentProgram = compile latest redScreen();
	}
}
