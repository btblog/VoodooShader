/*
 * This file is part of the Voodoo Shader Framework.
 *
 * Copyright (c) 2010-2012 by Sean Sube
 *
 * The Voodoo Shader Framework is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program; if not, write to
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 US
 *
 * Support and more information may be found at
 *   http://www.voodooshader.com
 * or by contacting the lead developer at
 *   peachykeen@voodooshader.com
 */
#pragma once

namespace VoodooShader
{
     /**
      * @page voodoo_graphics_effects Effects
      *
      * Shaders are complete effects designed to be run on programmable graphics hardware. They control almost all aspects
      * of how a piece of geometry is displayed.
      *
      * Each shader may have one or more techniques. A technique describes a full rendering process, and may have one or
      * more passes. Each pass describes a particular way to render the given geometry, and may have multiple programs. Each
      * program controls a particular part of the render process. In addition, shaders, techniques and passes contain some
      * metadata used by the system to control how and where they are rendered. For any given piece of geometry, one
      * technique is in use and the geometry is drawn once with each pass of that technique.
      *
      * @section voodoo_graphics_effects_shaders Shader Programs 
      *
      * Each program is designed to control a single specific stage of the render pipeline, typically handling how a data
      * type is transformed (geometry, vertex, pixel, etc). The two most common stages, vertex and pixel, work with
      * existing data and transform it. Both have been supported since OpenGL 1.4 and DirectX 8 in some form, and almost all
      * systems today support both. Given Voodoo Shader's focus, it is safe to assume both stages are supported (the exact 
      * level of support may vary, however).
      *
      * The vertex shader handles each vertex, transforming them into view space and sometimes calculating lighting or
      * surface normals.
      *
      * The pixel shader handles each pixel (or fragment) as it is rendered. The pixel shader handles lighting in
      * per-pixel lighting solutions, as well applying and blending texture stages, blending vertex colors, and any other
      * operations that may vary for each pixel rendered.
      *
      * @note OpenGL and Cg use "fragment" instead of pixel to refer to the shader running on pixels. For clarity, Voodoo
      *         Shader refers to these as pixel shaders, regardless of binding.
      *
      * The geometry stage has the opportunity to create vertexes if necessary and can build geometry dynamically. This is
      * often used with a form of render-to-vertex buffer, to generate and store the geometry for later use. Geometry stages
      * will often depend heavily on parameters passed into the effect. Geometry stages are supported on DirectX 10 or
      * OpenGL 3.2 and better, usually.
      *
      * Most recently, two tessellation control stages have been added (domain and hull). These are supported in DirectX 11
      * and equivalent, and so are not wide spread. They have some similarities to the geometry stage, but provide more
      * control over the hardware tessellation process.
      *
      * The least common stage, by far, is the compute stage. These have only partial support in Voodoo Shader, due to their
      * purpose: processing raw data and retrieving results. Voodoo Shader @a is able to compile and bind them, but they are
      * of very little use within Voodoo Shader's scope and so support is lacking and requires significant work on the part
      * of the adapter.
      *
      * @section voodoo_graphics_effects_system Shader System
      *
      * In addition to the standard HLSL compiler, Voodoo adds a few additional features to the shader system:
      *
      * @subsection voodoo_graphics_effects_system_parameters Shader Parameters
      *
      * Voodoo provides a system to link effect-level parameters to application or system-level variables. This provides an
      * easy way to provide data to shaders and is capable of linking many parameters from various effects to the same
      * global parameter. Effect parameters may only be linked to global parameters. Global parameters are created by
      * calling ICore::CreateParameter(), then any number of other parameters may be linked by calling IParameter::Attach()
      * on the global parameter and providing the effect parameter, like so:
      *
      * @code
      * IParameter * global = core->CreateParameter("time", VSPT_Float);
      * IParameter * effect = shader->GetParameter("time");
      * global->AttachParameter(effect);
      * @endcode
      *
      * Whenever the global parameter is set to a new value, all attached parameters will also be updated. This mechanism is
      * useful for things like system time, common matrices, random values or other data that may be used by many shaders.
      * To indicate the parent parameter to the linker, a parameter should have a `vs_source` string annotation.
      *
      * @code
      * float2 resolution < string vs_source = ":resolution"; >;
      * @endcode
      *
      * @subsection voodoo_graphics_effects_targets Shader Targets
      *
      * Voodoo also provides a system to specify a target for each technique or pass. This provides an easy way to setup
      * render-to-texture effects. Each shader technique and pass may have a target annotation, which gives the name of a
      * texture. The results of the technique or pass will be sent to the specified target.
      *
      * @code
      * sampler2D diffuseSamp < vs_texture = "buffer_diffuse"; >;
      * sampler2D specSamp < vs_texture = "buffer_specular"; >;
      *
      * technique dx9_high
      * {
      *     pass diffuse < string vs_target0 = ":buffer_diffuse"; >
      *     {
      *         ...
      *     }
      *     pass spec < string vs_target0 = ":buffer_specular"; >
      *     {
      *         ...
      *     }
      *     pass combine
      *     {
      *         return ( diffuseSamp + specSamp );
      *     }
      * }
      * @endcode
      *
      * This allows pass and technique output to be stored and later used, by other passes from the same effect or even by
      * other effects. If no target is specified in the technique or pass annotations, the shader linker uses the null 
      * texture, which does not save texture data. Textures may be bound using ITexture::Bind().
      *
      * @section voodoo_graphics_params_diff Virtual and Effect Parameters
      *
      * Voodoo supports two general varieties of parameter (virtual and effect) and a number of specific data types.
      *
      * The primary difference between virtual params and effect params are where they exist. Effect parameters exist within
      * a shader effect and on the GPU, and are used directly within programs. Virtual parameters exist only in the runtime
      * and on the CPU, and may have many effect parameters attached to them. When the virtual parameter is changed, the
      * effect parameters attached will take the same value (making it easy to provide global variables).
      *
      * @section voodoo_graphics_params_settings Setting Parameters
      *
      * When effect parameters are set, the values must be sent to the GPU and the program may have to be recompiled. The
      * value may be downloaded immediately or when needed, and may be kept in system RAM by the runtime or driver. Virtual
      * parameters are set immediately, as they are always kept in system RAM. Any effect parameters attached to a virtual
      * parameter will be updated by the runtime (the update will occur before use, but exact time may vary).
      *
      * @section voodoo_graphics_params_types Parameter Types
      *
      * Voodoo supports most common parameter types, including scalars (and vectors and matrices), samples, structs and
      * arrays.
      *
      * Scalars are connected to numeric data types, usually from 1 to 16 floating-point components.
      *
      * Samplers are connected to textures and sample pixel data from them.
      *
      * @page voodoo_textures Textures
      *
      * The image loading system used in Voodoo is capable of reading and writing a large variety of formats, providing
	  * easy access to most common textures.
      *
      * @section voodoo_textures_types Texture Types
      *
      * Three basic texture types are supported in Voodoo:
      *     - 1-dimensional texture rows (a simple row of pixels, 1 by x)
      *     - 2-dimensional texture planes (the most common type, a rectangle of pixels, x by y)
      *     - 3-dimensional texture volumes (effectively a number of 2D textures stacked in slices, x by y by z)
      *
      * Any of these types may also contain mipmaps, which theoretically add another dimension but are not considered as
      * such.
      *
      * A different sampler type is provided for each texture type (@p sampler1D, @p sampler2D, and @p sampler3D), each
      * optimized to sample pixels from a particular texture type. Various sampling instructions are provided, varying in
      * how they sample from the texture and what sampler type they use (2d, 3d, mipmap bias, etc). Samplers require texture
      * coordinates when used, and each type of texture requires one coordinate per dimension. Some texture sampling
      * instructions can perform additional filtering or draw from specific mipmaps and may need more coordinates.
      *
      * @section voodoo_textures_formats Texture Formats
      *
      * Voodoo supports a decent sampling of internal texture formats. These formats specify how much data a texture holds
      * and how it is stored. There are some limitations and some potentially useful formats are not yet supported, due to
      * the differences between DirectX and OpenGL, but many common formats are available. All the listed formats are usable
      * as a 2D texture, and with the exception of the depth formats, should be usable as 1D or 3D textures as well. For
      * most of these formats, DirectX and OpenGL equivalents are indicated below, along with a notation indicating if the
      * texture may be used as a render target or copied to and from. Textures are always delivered to shaders as floats
      * through sampling functions. This may cause some confusion as to how texture data is stored; the data is @e not
      * usually stored as a float, but instead an integer using the number of bits given below. Textures that are not stored
      * in floating-point formats are typically clamped to range (0-1) in hardware. Shaders may output higher or lower
      * values, but they will usually be clamped. If you need to store values outside of that range, use one of the formats
      * suffixed with 'F' to store the data as floats (single and double texture formats are available).
      *
      * | Voodoo Format      | DirectX Format      | OpenGL Format           | RT/Copy/Load<sup>6</sup> | Bits | Channels |
	  *	---------------------|---------------------|-------------------------|--------------------------|------|-----------
      * | @ref VSFmt_Null    | n/a <sup>1</sup>    | n/a <sup>1</sup>        | Y/N/N                    | 0    | none     |
      * | @ref VSFmt_RGB5A1  | D3DFMT_A1R5G5B5     | GL_RGB5_A1              | Yes                      | 16   | RGBA     |
      * | @ref VSFmt_RGB8    | D3DFMT_X8R8G8B8     | GL_RGB8                 | Yes                      | 24   | RGB      |
      * | @ref VSFmt_RGBA8   | D3DFMT_A8R8G8B8     | GL_RGBA8                | Yes                      | 32   | RGBA     |
      * | @ref VSFmt_RGB10A2 | D3DFMT_A2R10G10B10  | GL_RGB10_A2             | Yes                      | 32   | RGBA     |
      * | @ref VSFmt_RGBA16F<sup>2</sup> | D3DFMT_A16B16G16R16F | GL_RGBA16F | Yes                      | 64   | RGBA     |
      * | @ref VSFmt_RGBA32F<sup>2</sup> | D3DFMT_A32B32G32R32F | GL_RGBA32F | Yes                      | 128  | RGBA     |
      * | @ref VSFmt_D16     | D3DFMT_D16          | GL_DEPTH_COMPONENT16    | Y/Y<sup>3</sup>/N        | 16   | R        |
      * | @ref VSFmt_D24     | D3DFMT_D24X8        | GL_DEPTH_COMPONENT24    | Y/Y<sup>3</sup>/N        | 24   | R        |
      * | @ref VSFmt_D24S8   | D3DFMT_D24S8        | GL_DEPTH_COMPONENT24S8  | Y/Y<sup>3</sup>/N        | 32   | R<sup>4</sup>|
      * | @ref VSFmt_D32     | D3DFMT_D32          | GL_DEPTH_COMPONENT32    | Y/Y<sup>3</sup>/N        | 32   | R        |
      * | @ref VSFmt_DMax    | varies <sup>5</sup> | varies <sup>5</sup>     | Y/Y<sup>3</sup>/N        | variable | R    |
      *
      * <em><sup>1</sup>:</em> the null format is a special format with no backing texture data, but which can be bound as
      *     a render-target in any of the color buffers. This is useful when color data may be discarded but depth data must
      *     be written, as most bindings require at least one render target besides a depth texture.
      *
      * <em><sup>2</sup>:</em> floating-point texture formats (@ref VSFmt_RGBA16F and @ref VSFmt_RGBA32F) may not be 
      *     supported on all hardware. Where they are not available, the next-highest precision format will be used, being
      *     no less than @ref VSFmt_RGBA8.
      *
      * <em><sup>3</sup>:</em> Depth textures suffer additional restrictions in some APIs. See the
      *     @ref voodoo_textures_depth "depth buffers" section for more information.
      *
      * <em><sup>4</sup>:</em> Depth/stencil formats allow access to the depth component only, mapping to one of the regular 
      *     channels.
      *
      * <em><sup>5</sup>:</em> The @ref VSFmt_DMax format is unique in that it has a varying depth. It is the maximum 
      *     precision depth buffer which can be used as a source texture on the current platform. The actual format varies
      *     widely, from D16 to INTZ or even D32, depending on hardware capabilities. When using a depth texture, this is
      *     typically the desired format. The Voodoo Shader binding will manage all API-specific nonsense for you.
      *
      * <em><sup>6</sup>:</em> Texture loading is restricted by the file system library. The values given apply only to
      *     Voodoo_WFilesystem, which uses a custom build of DevIL.
      *
      * @section voodoo_textures_depth Depth Buffers
      *
      * For a binding to be fully compatible Voodoo Shader, it must supply realtime depth data to a shader-readable
      * texture. How this is performed is left to the discretion of the binding, as it varies greatly between old D3D
      * versions and OpenGL or newer D3D. This data should be stored such that greater distances are represented by higher
      * values and, if possible, the distance should not be normalized (not bounded by @p (0-1)). When possible, it is
      * recommended that the depth information be stored in a 32-bit floating point component. Depth data must be accessible
      * to shaders from the R channel of the depth texture. At this time, the GBA components of the texture are considered
      * undefined, but reserved for future use. Depending on implementation, they may contain depth data, uninitialized
      * memory, or other data and must not be used. As DirectX 9 does not usually allow @ref VSFmt_D32 textures to be read,
      * the @ref VSFmt_DMax format is provided to hide implementation details from adapters. This format is the greatest
      * precision depth texture available on the system and able to be used for general purposes. Some implementation of
      * @ref VSFmt_DMax is available on all supported hardware.
      *
      * @section voodoo_textures_loading Texture Loading
      *
      * Texture loading is implemented through the binding and DevIL library. A variety of formats are supported, although
      * unsuitable ones have been removed from the library to save space and prevent their use.
      *
      * For most purposes, the @p PNG or @p DDS formats are recommended. Both are capable of transparency, high depth, and
      * compression. @p PNG is a lossless format while @p DDS is somewhat lossy, although @p DDS provides a greater variety
      * of bit depths. 
      *
      * Some formats, such as @p BMP or @p TGA, are included for legacy purposes. Both formats are commonly used, but not
      * recommended due to large size and constraints. Notable @a unsupported formats include @p GIF and @p JPEG, both of
      * which are significantly lossy leading to artifacts when used.
      *
      * @section voodoo_textures_fileformats Supported File Formats
      *
      * | Format                     | Extension | Load | Save<sup>2</sup> |
      * -----------------------------|-----------|------|-------------------
      * | Windows Bitmap<sup>1</sup> | bmp       | Yes  | Yes |
      * | DirectDraw Surface         | dds       | Yes  | Yes | 
      * | C-style Header<sup>1</sup> | h         |      | Yes |
      * | Radiance High Dynamic      | hdr       | Yes  | Yes |
      * | Portable Network Graphics  | png       | Yes  | Yes |
      * | Adobe Photoshop            | psd       | Yes  | Yes |
      * | Raw Data                   | raw       | Yes  | Yes |
      * | Truevision Targa           | tga       | Yes  | Yes |
      *
      * <em><sup>1</sup>:</em> These formats are not recommended for use, due to poor quality or capabilities.
      * 
      * <em><sup>2</sup>:</em> @ref voodoo_module_wfilesystem does not yet support saving images. Support for these formats
      *     is provided directly by DevIL, including the ability to convert most internal formats.
      *
      * Questions regarding formats and support, as they apply to DevIL, should be directed to the developer of this fine
      * library. Questions regarding Voodoo Shader's support or use of DevIL, or that of any Voodoo Shader module, should be 
      * directed to Voodoo Shader or module developer(s).
      */
}
