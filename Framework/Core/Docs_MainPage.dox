/*
 * This file is part of the Voodoo Shader Framework.
 *
 * Copyright (c) 2010-2012 by Sean Sube
 *
 * The Voodoo Shader Framework is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program; if not, write to
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 US
 *
 * Support and more information may be found at
 *   http://www.voodooshader.com
 * or by contacting the lead developer at
 *   peachykeen@voodooshader.com
 */

#pragma once

namespace VoodooShader
{
    /**
     * @mainpage Voodoo Shader Framework
     * The Voodoo Shader Framework is a set of support libraries designed to provide extensive shader integration into
     * graphics applications, both before and after development.
     *
     * Voodoo uses a system of core modules and adapters to provide the widest compatibility and best performance possible
     * across a wide range of applications and APIs. Voodoo supports both OpenGL and DirectX, using the HLSL shader language
     * and the MojoShader project.
     *
     * In addition, Voodoo provides a second processing step to provide shaders with easy access to game resources.
     *
     * The Voodoo core and supported shaders remain constant between target applications and adapters, providing a unified
     * set of features and single target for shaders.
     *
     * @section voodoo_main_shaders Shader Support
     *
     * Voodoo uses the HLSL shader language and various compilers and processors to provide a simple-to-use and 
     * API-independent shader system with wide support. Voodoo shaders run under both OpenGL and DirectX and can scale over 
     * across a great variety of hardware, from OpenGL 1.1 to 4.0 and DirectX 8 to 11. Applications using any of the 
     * supported APIs are supported within Voodoo, with a near-identical feature set provided across the board.
     *
     * In addition to fully supporting the HLSL language, Voodoo implements a second, internal linking stage to offer more
     * powerful features such as deferred rendering and material shaders, with or without original application support.
     * Voodoo uses features such as semantics and annotations to provide these features without adding complexity to the
     * language or breaking compatibility with other shader tools. Voodoo provides a set of compiler options to allow
     * shaders to conditionally compile various levels of support. Voodoo fully supports techniques and passes within a
     * shader, as well as various program stages.
     *
     * Access to hardware textures and render information is provided through application-specific adapters, allowing Voodoo
     * to be tied tightly into a huge number of new and existing programs.
     *
     * @section voodoo_main_supportlibs Support Libraries
     *
     * Voodoo provides a number of support libraries, many used within Voodoo. These include the Voodoo dynamic loader
     * (capable to dynamically loading the Voodoo core and an adapter into a running process), a simple file system manager
     * to streamline resource loading, EasyHook-based function intercept library, comprehensive Unicode string handling, and
     * other useful code. These libraries are available for use by code within and outside of the Voodoo project and
     * simplify a number of common or complex tasks.
     *
     * @section voodoo_main_quality Testing and Code Quality
     *
     * The Voodoo framework covers an immense scope and tackles an intriguing and often complex task. To maximize stability,
     * speed and code quality, all code within the Voodoo Shader Framework must meet @ref voodoo_quality
     * "a set of quality-control standards" and be fully tested before release. Tests are carried out within specialized
     * test suites and target applications.
     *
     * @section voodoo_main_logs Logs and Debugging
     *
     * In addition to code testing, Voodoo provides logging libraries to record all actions in detail. The verbosity of the
     * log can be customized, with the highest levels recording API calls and their parameters. Errors and warnings
     * originating within Voodoo code are always logged, and safeguards are put in place to make sure log data is written to
     * disk, even in the event of a fatal error or loss of power.
     *
     * Debug builds of Voodoo are available, as is source code, to aid debugging. Debug builds are built with full symbols
     * and additional error checking.
     *
     * Voodoo is also fully compatible with your favorite graphics debugger, including PIX for Windows (DirectX) and
     * GLintercept (OpenGL). This also extends to screen capture programs and system tools, and code debuggers. In some
     * cases, Voodoo's logging may be able to augment the information from these tools.
     *
     * On the Github project, a tracker for bugs and features is available and open to all users to submit bugs and logs.
     *
     * @section voodoo_main_docs Documentation
     *
     * The entire Voodoo project is heavily documented using doxygen notation. These docs are compiled and uploaded along
     * with each code push and release. Everything from the variable syntax to texture load formats to the adapter interface
     * are documented in depth, cross-referenced and any potential issues are noted. The documentation is interwoven in the
     * source, so it is kept up-to-date and extensive and new code is documented as it's written.
     */
}
