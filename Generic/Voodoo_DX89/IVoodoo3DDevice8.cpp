/**************************************************************************************************\
* This file is part of the Voodoo Shader Framework, a comprehensive shader support library.
* Copyright (C) 2010 by Sean Sube
*
*
* This program is free software; you can redistribute it and/or modify it under the terms of the 
* GNU General Public License as published by the Free Software Foundation; either version 2 of the 
* License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License along with this program; 
* if  not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, 
* Boston, MA  02110-1301 US
*
* Support and more information may be found at http://www.voodooshader.com, or by contacting the
* developer at peachykeen@voodooshader.com
\**************************************************************************************************/

//! @todo Verify this code. It has been mostly generated by regexes and draws a bit from the MGE
//		  setup. The MGE code is known to be buggy, the regexes need checked.

#include "Voodoo_DX89.hpp"
#include <set>

static HRESULT DefaultErrorCode = D3DERR_INVALIDCALL;

/**
* The core Voodoo wrapper class for D3D8 devices. This class is responsible for processing,
* translating and handling most API calls. Due to this, it must be as optimized as possible
* (considering the circumstances) and should contain only tested code.
* 
* @note The various IVoodoo3D8 interfaces provide an application-opaque wrapper that actually
* 		 implements a Direct3D 8.9 layer (8 to 9 translation). For use with D3D9 applications, the
* 		 IVoodoo3D9 interface set should be used.         
*/
class IVoodoo3DDevice8 
	: public IDirect3DDevice8
{
	/**
	* A pointer to the true underlying IDirect3DDevice9 object wrapped by this IVoodoo interface.            
	*/
	IDirect3DDevice9 * mRealDevice;

	IDirect3D9 * mRealObject;

	std::set<DWORD> mVertexShaders;
	std::set<DWORD>  mPixelShaders;

public:
	/**
	* The default, public constructor for IVoodoo3D objects.            
	*/
	IVoodoo3DDevice8(IDirect3DDevice9 * realDevice)
		: mRealDevice(realDevice)
	{

	}

	// IUnknown methods
	GEMCALL(HRESULT) QueryInterface(REFIID riid, void ** ppvObj)
	{
		return mRealDevice->QueryInterface(riid, ppvObj);
	}

	GEMCALL(ULONG) AddRef()
	{
		return mRealDevice->AddRef();
	}

	GEMCALL(ULONG) Release()
	{
		ULONG refCount = mRealDevice->Release();

		if ( refCount == 0 )
		{
			delete this;
			return 0;
		} else {
			return refCount;
		}
	}

	// IDirect3DDevice8 methods
	GEMCALL(HRESULT) ApplyStateBlock(DWORD Token)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Log("Voodoo DX8.9: IVoodoo3DDevice8::ApplyStateBlock == UNUSED\n");
#endif
		return DefaultErrorCode;
	}

	GEMCALL(HRESULT) BeginScene()
	{
		HRESULT hr = mRealDevice->BeginScene();

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::BeginScene() == %d\n")
			.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) BeginStateBlock()
	{
		HRESULT hr = mRealDevice->BeginStateBlock();

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::BeginStateBlock() == %d\n")
			.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) CaptureStateBlock(DWORD Token)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Log("Voodoo DX8.9: IVoodoo3DDevice8::CaptureStateBlock == UNUSED\n");
#endif

		return DefaultErrorCode;
	}

	GEMCALL(HRESULT) Clear
	(
		DWORD Count,
		const D3DRECT * pRects,
		DWORD Flags,
		D3DCOLOR Color,
		float Z,
		DWORD Stencil
	)
	{
		HRESULT hr = mRealDevice->Clear(Count, pRects, Flags, Color, Z, Stencil);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::Clear(%d, %d, %d, %d, %d == %d\n")
			.With(Count).With(pRects).With(Flags).With(Color).With(Z).With(Stencil)
			.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) TestCooperativeLevel
	(
		
	)
	{
		HRESULT hr = mRealDevice->TestCooperativeLevel();

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::TestCooperativeLevel() == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(UINT) GetAvailableTextureMem
	(
		
	)
	{
		UINT mem = mRealDevice->GetAvailableTextureMem();

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetAvailableTextureMem() == %d\n")
		.With(mem).Done();
#endif

		return mem;
	}


	GEMCALL(HRESULT) ResourceManagerDiscardBytes
	(
		DWORD Bytes
	)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::ResourceManagerDiscardBytes(%d) == UNUSED\n")
		.With(Bytes).Done();
#endif

		return DefaultErrorCode;
	}


	GEMCALL(HRESULT) GetDirect3D
	(
		IDirect3D8 ** ppD3D8
	)
	{
		(*ppD3D8) = (IDirect3D8*)mRealObject;

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetDirect3D(%d) == D3D_OK\n")
		.With(*ppD3D8).Done();
#endif

		return D3D_OK;
	}


	GEMCALL(HRESULT) GetDeviceCaps
	(
		D3DCAPS8 * pCaps
	)
	{
		D3DCAPS9 rCaps;

		HRESULT hr = mRealDevice->GetDeviceCaps(&rCaps);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetDeviceCaps(%d) == %d\n")
		.With(pCaps).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		if ( SUCCEEDED(hr) )
		{
			memcpy(pCaps, &rCaps, sizeof(D3DCAPS8));
		}

		return hr;
	}


	GEMCALL(HRESULT) GetDisplayMode
	(
		D3DDISPLAYMODE * pMode
	)
	{
		HRESULT hr = mRealDevice->GetDisplayMode(0, pMode);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetDisplayMode(%d) == %d\n")
		.With(pMode).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetCreationParameters
	(
		D3DDEVICE_CREATION_PARAMETERS * pParameters
	)
	{
		HRESULT hr = mRealDevice->GetCreationParameters(pParameters);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetCreationParameters(%d) == %d\n")
		.With(pParameters).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetCursorProperties
	(
		UINT XHotSpot,
		UINT YHotSpot,
		IDirect3DSurface8 * pCursorBitmap
	)
	{
		//! @todo Will need tweaked when a IVoodoo3DSurface is implemented
		HRESULT hr = mRealDevice->SetCursorProperties(XHotSpot, YHotSpot, (IDirect3DSurface9*)pCursorBitmap);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetCursorProperties(%d, %d, %d) == %d\n")
		.With(XHotSpot).With(YHotSpot).With(pCursorBitmap).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(void) SetCursorPosition
	(
		int X,
		int Y,
		DWORD Flags
	)
	{
		mRealDevice->SetCursorPosition(X, Y, Flags);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetCursorPosition(int X,int Y,DWORD Flags)\n")
		.With(X).With(Y).With(Flags).Done();
#endif
	}


	GEMCALL(BOOL) ShowCursor
	(
		BOOL bShow
	)
	{
		BOOL show = mRealDevice->ShowCursor(bShow);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::ShowCursor(%d) == %d\n")
		.With(bShow).With(show).Done();
#endif

		return show;
	}


	GEMCALL(HRESULT) CreateAdditionalSwapChain
	(
		D3DPRESENT_PARAMETERS8 * pPresentationParameters,
		IDirect3DSwapChain8 ** pSwapChain
	)
	{
		HRESULT hr = mRealDevice->CreateAdditionalSwapChain
		(
			(D3DPRESENT_PARAMETERS*)pPresentationParameters, 
			(IDirect3DSwapChain9**)pSwapChain
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateAdditionalSwapChain(%d, %d) == %d\n")
		.With(pPresentationParameters).With(pSwapChain).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) Reset
	(
		D3DPRESENT_PARAMETERS8 * pPresentationParameters
	)
	{
		HRESULT hr = mRealDevice->Reset((D3DPRESENT_PARAMETERS*)pPresentationParameters);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::Reset(%d) == %d\n")
		.With(pPresentationParameters).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) Present
	(
		CONST RECT * pSourceRect,
		CONST RECT * pDestRect,
		HWND hDestWindowOverride,
		CONST RGNDATA * pDirtyRegion
	)
	{
		HRESULT hr = mRealDevice->Present(pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::Present(%d, %d, %d, %d) == %d\n")
		.With(pSourceRect).With(pDestRect).With(hDestWindowOverride).With(pDirtyRegion)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) GetBackBuffer
	(
		UINT BackBuffer,
		D3DBACKBUFFER_TYPE Type,
		IDirect3DSurface8 ** ppBackBuffer
	)
	{
		HRESULT hr = mRealDevice->GetBackBuffer(0, BackBuffer, Type, (IDirect3DSurface9**)ppBackBuffer);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetBackBuffer(%d, %d, %d) == %d\n")
		.With(BackBuffer).With(Type).With(ppBackBuffer).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) GetRasterStatus
	(
		D3DRASTER_STATUS * pRasterStatus
	)
	{
		HRESULT hr = mRealDevice->GetRasterStatus(0, pRasterStatus);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetRasterStatus(%d) == %d\n")
		.With(pRasterStatus).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	STDMETHOD_(void, SetGammaRamp)(DWORD Flags,CONST D3DGAMMARAMP* pRamp) PURE;
	STDMETHOD_(void, GetGammaRamp)(D3DGAMMARAMP* pRamp) PURE;

	/**
	 * Creates a texture in the IVoodoo runtime. The new texture must be registered with the core
	 * and, for shader purposes, we should attempt to create it as a render-target.            
	 */
	GEMCALL(HRESULT) CreateTexture
	(
		UINT Width,
		UINT Height,
		UINT Levels,
		DWORD Usage,
		D3DFORMAT Format,
		D3DPOOL Pool,
		IDirect3DTexture8 ** ppTexture
	)
	{
		HRESULT hr = D3DERR_INVALIDCALL;

		// If not a render-target, attempt to create it as one
		bool rtt = true;

		if ( !( Usage & D3DUSAGE_RENDERTARGET ) )
		{
			hr = mRealDevice->CreateTexture
			(
				Width, Height, Levels, Usage | D3DUSAGE_RENDERTARGET, Format, 
				Pool, (IDirect3DTexture9**)ppTexture, NULL
			);
		}

		// That failed, create as a standard texture
		if ( FAILED(hr) )
		{
			rtt = false;
			hr = mRealDevice->CreateTexture
			(
				Width, Height, Levels, Usage, Format, 
				Pool, (IDirect3DTexture9**)ppTexture, NULL
			);
		}

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateTexture(%d, %d, %d, %d, %d, %d, %d) == %d\n")
			.With(Width).With(Height).With(Levels).With(Usage).With(Format).With(Pool).With(ppTexture)
			.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		// One succeeded, the texture exists. We need to register it with the Voodoo core.
		if ( SUCCEEDED(hr) )
		{
			//VoodooCore->CreateTexture()
			//! @todo Set up the core texture registration for Voodoo DX8.9 and track filenames somehow
		}

		return hr;
	}


	GEMCALL(HRESULT) CreateVolumeTexture
	(
		UINT Width,
		UINT Height,
		UINT Depth,
		UINT Levels,
		DWORD Usage,
		D3DFORMAT Format,
		D3DPOOL Pool,
		IDirect3DVolumeTexture8 ** ppVolumeTexture
	)
	{
		HRESULT hr = mRealDevice->CreateVolumeTexture
		(
			Width, Height, Depth, Levels, Usage, Format,
			Pool, (IDirect3DVolumeTexture9**) ppVolumeTexture, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateVolumeTexture(%d, %d, %d, %d, %d, %d, %d, %d) == %d\n")
		.With(Width).With(Height).With(Depth).With(Levels).With(Usage).With(Format).With(Pool)
		.With(*ppVolumeTexture).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		//! @todo Set up the core volume texture registration for Voodoo DX8.9

		return hr;
	}

	GEMCALL(HRESULT) CreateCubeTexture
	(
		UINT EdgeLength,
		UINT Levels,
		DWORD Usage,
		D3DFORMAT Format,
		D3DPOOL Pool,
		IDirect3DCubeTexture8 ** ppCubeTexture
	)
	{
		HRESULT hr = mRealDevice->CreateCubeTexture
		(
			EdgeLength, Levels, Usage, Format, Pool, 
			(IDirect3DCubeTexture9**)ppCubeTexture, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateCubeTexture(%d, %d, %d, %d, %d, %d) == %d\n")
		.With(EdgeLength).With(Levels).With(Usage).With(Format).With(Pool).With(*ppCubeTexture)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) CreateVertexBuffer
	(
		UINT Length,
		DWORD Usage,
		DWORD FVF,
		D3DPOOL Pool,
		IDirect3DVertexBuffer8 ** ppVertexBuffer
	)
	{
		HRESULT hr = mRealDevice->CreateVertexBuffer
		(
			Length, Usage, FVF, Pool, (IDirect3DVertexBuffer9**)ppVertexBuffer, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateVertexBuffer(%d, %d, %d, %d, %d) == %d\n")
		.With(Length).With(Usage).With(FVF).With(Pool).With(*ppVertexBuffer)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) CreateIndexBuffer
	(
		UINT Length,
		DWORD Usage,
		D3DFORMAT Format,
		D3DPOOL Pool,
		IDirect3DIndexBuffer8 ** ppIndexBuffer
	)
	{
		HRESULT hr = mRealDevice->CreateIndexBuffer
		(
			Length, Usage, Format, Pool, (IDirect3DIndexBuffer9**)ppIndexBuffer, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateIndexBuffer(%d, %d, %d, %d, %d) == %d\n")
		.With(Length).With(Usage).With(Format).With(Pool).With(*ppIndexBuffer)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	/**
	 * This function creates a stand-alone render target surface in the original D3D8 and 9 setups.
	 * For Voodoo's purposes, this should create a render target texture if at all possible, then
	 * retrieve the surface from that texture. 
	 * 
	 * @todo Find a way to force CreateRenderTarget to make RT textures and find a way to name them.
	 */
	GEMCALL(HRESULT) CreateRenderTarget
	(
		UINT Width,
		UINT Height,
		D3DFORMAT Format,
		D3DMULTISAMPLE_TYPE MultiSample,
		BOOL Lockable,
		IDirect3DSurface8 ** ppSurface
	)
	{
		HRESULT hr = mRealDevice->CreateRenderTarget
		(
			Width, Height, Format, MultiSample, 0, Lockable, (IDirect3DSurface9**)ppSurface, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateRenderTarget(%d, %d, %d, %d, %d, %d) == %d\n")
		.With(Width).With(Height).With(Format).With(MultiSample).With(Lockable).With(*ppSurface)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) CreateDepthStencilSurface
	(
		UINT Width,
		UINT Height,
		D3DFORMAT Format,
		D3DMULTISAMPLE_TYPE MultiSample,
		IDirect3DSurface8 ** ppSurface
	)
	{
		HRESULT hr = mRealDevice->CreateDepthStencilSurface
		(
			Width, Height, Format, MultiSample, 0, 0, (IDirect3DSurface9**)ppSurface, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateDepthStencilSurface(%d, %d, %d, %d, %d) == %d\n")
		.With(Width).With(Height).With(Format).With(MultiSample).With(*ppSurface)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	/**
	 * Creates a D3D8 image surface, a sort of placeholder surface. Because D3D9 has no equivalent,
	 * this is redirected to CreateOffscreenPlainSurface at some point.
	 * 
	 * @warning This uses a different call than the D3D8 original, and may not perform exactly the
	 * 			same. <em>(non-standard behavior)</em>
	 * @todo Test the pool these should be created in. May be default, managed or sysmem, not sure yet.
	 */
	GEMCALL(HRESULT) CreateImageSurface
	(
		UINT Width,
		UINT Height,
		D3DFORMAT Format,
		IDirect3DSurface8 ** ppSurface
	)
	{
		HRESULT hr = mRealDevice->CreateOffscreenPlainSurface
		(
			Width, Height, Format, D3DPOOL_DEFAULT, (IDirect3DSurface9**)ppSurface, NULL
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateImageSurface(%d, %d, %d, %d) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	/**
	 * Copies rectangular areas of data from one surface to another. There is no such function in
	 * D3D9, it instead requires each texture to be stretched separately. It is, however, possible
	 * to translate the call as D3D8 applies some very specific restrictions, including a lack of
	 * stretching (means the rectangles must be the same dimensions, but at different points) and
	 * the same format and surface properties.         
	 * 
	 * @warning For testing purposes, this only copies the first given rectangle. This is easy
	 * 			enough to fix, but I want to do more testing first. <em>(non-standard behavior)</em>
	 * @todo Test and then make this perform identical to the D3D8 version.
	 */
	GEMCALL(HRESULT) CopyRects
	(
		IDirect3DSurface8 * pSourceSurface,
		CONST RECT * pSourceRectsArray,
		UINT cRects,
		IDirect3DSurface8 * pDestinationSurface,
		CONST POINT * pDestPointsArray
	)
	{
		HRESULT hr = mRealDevice->StretchRect
		(
			(IDirect3DSurface9*)pSourceSurface, pSourceRectsArray, 
			(IDirect3DSurface9*)pDestinationSurface, pSourceRectsArray, D3DTEXF_NONE);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CopyRects(%d, %d, %d, %d, %d) == %d\n")
		.With(pSourceSurface).With(pSourceRectsArray).With(cRects).With(pDestinationSurface)
		.With(pDestPointsArray).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) UpdateTexture
	(
		IDirect3DBaseTexture8 * pSourceTexture,
		IDirect3DBaseTexture8 * pDestinationTexture
	)
	{
		HRESULT hr = mRealDevice->UpdateTexture
		(
			(IDirect3DBaseTexture9*) pSourceTexture,(IDirect3DBaseTexture9*) pDestinationTexture
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::UpdateTexture(%d, %d) == %d\n")
		.With(pSourceTexture).With(pDestinationTexture).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	/**
	 * Retrieves the front-buffer surface from the D3D8 device. D3D9 has no equivalent call (kinda).            
	 */
	GEMCALL(HRESULT) GetFrontBuffer
	(
		IDirect3DSurface8 * pDestSurface
	)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetFrontBuffer(%d) == UNUSED\n")
		.With(pDestSurface).Done();
#endif

		return DefaultErrorCode;
	}

	/**
	 * Sets a new render-target surface and depth/stencil buffer. D3D9 does not combine these calls,
	 * so this automatically splits the calls and returns the combined results.
	 */
	GEMCALL(HRESULT) SetRenderTarget
	(
		IDirect3DSurface8 * pRenderTarget,
		IDirect3DSurface8 * pNewZStencil
	)
	{
		HRESULT hr = mRealDevice->SetRenderTarget(0, (IDirect3DSurface9*)pRenderTarget);
		hr |= mRealDevice->SetDepthStencilSurface((IDirect3DSurface9*)pNewZStencil);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetRenderTarget(%d, %d) == %d\n")
		.With(pRenderTarget).With(pNewZStencil).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) GetRenderTarget
	(
		IDirect3DSurface8 ** ppRenderTarget
	)
	{
		HRESULT hr = mRealDevice->GetRenderTarget(0, (IDirect3DSurface9**)ppRenderTarget);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetRenderTarget(%d) == %d\n")
		.With(*ppRenderTarget).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetDepthStencilSurface
	(
		IDirect3DSurface8 ** ppZStencilSurface
	)
	{
		HRESULT hr = mRealDevice->GetDepthStencilSurface( (IDirect3DSurface9**)ppZStencilSurface);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetDepthStencilSurface(%d) == %d\n")
		.With(*ppZStencilSurface).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) EndScene()
	{
		HRESULT hr = mRealDevice->EndScene();

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::EndScene() == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) SetTransform
	(
		D3DTRANSFORMSTATETYPE State,
		CONST D3DMATRIX * pMatrix
	)
	{
		HRESULT hr = mRealDevice->SetTransform(State, pMatrix);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetTransform(%d, %d) == %d\n")
		.With(State).With(pMatrix).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetTransform
	(
		D3DTRANSFORMSTATETYPE State,
		D3DMATRIX * pMatrix
	)
	{
		HRESULT hr = mRealDevice->GetTransform(State, pMatrix);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetTransform(%d, %d) == %d\n")
		.With(State).With(pMatrix).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) MultiplyTransform
	(
		D3DTRANSFORMSTATETYPE State,
		CONST D3DMATRIX * pMatrix
	)
	{
		HRESULT hr = mRealDevice->MultiplyTransform(State, pMatrix);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::MultiplyTransform(%d, %d) == %d\n")
		.With(State).With(pMatrix).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetViewport
	(
		CONST D3DVIEWPORT8 * pViewport
	)
	{
		HRESULT hr = mRealDevice->SetViewport((CONST D3DVIEWPORT9 *)pViewport);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetViewport(%d) == %d\n")
		.With(pViewport).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetViewport
	(
		D3DVIEWPORT8 * pViewport
	)
	{
		HRESULT hr = mRealDevice->GetViewport((D3DVIEWPORT9*)pViewport);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetViewport(%d) == %d\n")
		.With(pViewport).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetMaterial
	(
		CONST D3DMATERIAL8 * pMaterial
	)
	{
		HRESULT hr = mRealDevice->SetMaterial((CONST D3DMATERIAL9*) pMaterial);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetMaterial(%d) == %d\n")
		.With(pMaterial).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetMaterial
	(
		D3DMATERIAL8 * pMaterial
	)
	{
		HRESULT hr = mRealDevice->GetMaterial((D3DMATERIAL9*) pMaterial);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetMaterial(%d) == %d\n")
		.With(pMaterial).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetLight
	(
		DWORD Index,
		CONST D3DLIGHT8 * Light
	)
	{
		HRESULT hr = mRealDevice->SetLight(Index, (CONST D3DLIGHT9*)Light);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetLight(%d, %d) == %d\n")
		.With(Index).With(Light).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetLight
	(
		DWORD Index,
		D3DLIGHT8 * Light
	)
	{
		HRESULT hr = mRealDevice->GetLight(Index, (D3DLIGHT9*)Light);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetLight(%d, %d) == %d\n")
		.With(Index).With(Light).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) LightEnable
	(
		DWORD Index,
		BOOL Enable
	)
	{
		HRESULT hr = mRealDevice->LightEnable(Index, Enable);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::LightEnable(%d, %d) == %d\n")
		.With(Index).With(Enable).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetLightEnable
	(
		DWORD Index,
		BOOL * pEnable
	)
	{
		HRESULT hr = mRealDevice->GetLightEnable(Index, pEnable);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetLightEnable(%d, %d) == %d\n")
		.With(Index).With(pEnable).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetClipPlane
	(
		DWORD Index,
		CONST float * pPlane
	)
	{
		HRESULT hr = mRealDevice->SetClipPlane(Index, pPlane);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetClipPlane(%d, %d) == %d\n")
		.With(Index).With(pPlane).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetClipPlane
	(
		DWORD Index,
		float * pPlane
	)
	{
		HRESULT hr = mRealDevice->GetClipPlane(Index, pPlane);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetClipPlane(%d, %d) == %d\n")
		.With(Index).With(pPlane).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetRenderState
	(
		D3DRENDERSTATETYPE State,
		DWORD Value
	)
	{
		HRESULT hr = mRealDevice->SetRenderState(State, Value);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetRenderState(%d, %d) == %d\n")
		.With(State).With(Value).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetRenderState
	(
		D3DRENDERSTATETYPE State,
		DWORD * pValue
	)
	{
		HRESULT hr = mRealDevice->GetRenderState(State, pValue);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetRenderState(%d, %d) == %d\n")
		.With(State).With(pValue).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	/**
	 * Due to differences between the D3D8 and D3D9 APIs, this function is currently non-
	 * functional.            
	 */
	GEMCALL(HRESULT) EndStateBlock
	(
		DWORD * pToken
	)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::EndStateBlock(%d) == UNUSED\n")
			.With(pToken).Done();
#endif

		return DefaultErrorCode;

		/*
		HRESULT hr = mRealDevice->EndStateBlock(pToken);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::EndStateBlock(%d) == %d\n")
		.With(pToken).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
		*/
	}


	/**
	 * This function does not exist in the D3D9 API.            
	 */
	GEMCALL(HRESULT) DeleteStateBlock
	(
		DWORD Token
	)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DeleteStateBlock(%d) == UNUSED\n")
			.With(Token).Done();
#endif

		return DefaultErrorCode;

		/*
		HRESULT hr = mRealDevice->DeleteStateBlock(Token);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DeleteStateBlock(%d) == %d\n")
		.With(Token).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
		*/
	}


	/**
	* Due to differences between the D3D8 and D3D9 APIs, this function is currently non-
	* functional.            
	*/
	GEMCALL(HRESULT) CreateStateBlock
	(
		D3DSTATEBLOCKTYPE Type,
		DWORD * pToken
	)
	{
#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateStateBlock(%d, %d) == UNUSED\n")
			.With(Type).With(pToken).Done();
#endif

		return DefaultErrorCode;

		/*
		HRESULT hr = mRealDevice->CreateStateBlock(Type, pToken);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateStateBlock(%d, %d) == %d\n")
		.With(Type).With(pToken).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
		*/
	}


	GEMCALL(HRESULT) SetClipStatus
	(
		CONST D3DCLIPSTATUS8 * pClipStatus
	)
	{
		HRESULT hr = mRealDevice->SetClipStatus((CONST D3DCLIPSTATUS9*)pClipStatus);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetClipStatus(%d) == %d\n")
		.With(pClipStatus).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetClipStatus
	(
		D3DCLIPSTATUS8 * pClipStatus
	)
	{
		HRESULT hr = mRealDevice->GetClipStatus((D3DCLIPSTATUS9*)pClipStatus);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetClipStatus(%d) == %d\n")
		.With(pClipStatus).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetTexture
	(
		DWORD Stage,
		IDirect3DBaseTexture8 ** ppTexture
	)
	{
		HRESULT hr = mRealDevice->GetTexture(Stage, (IDirect3DBaseTexture9**)ppTexture);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetTexture(%d, %d) == %d\n")
		.With(Stage).With(*ppTexture).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetTexture
	(
		DWORD Stage,
		IDirect3DBaseTexture8 * pTexture
	)
	{
		HRESULT hr = mRealDevice->SetTexture(Stage, (IDirect3DBaseTexture9*)pTexture);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetTexture(%d, %d) == %d\n")
		.With(Stage).With(pTexture).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetTextureStageState
	(
		DWORD Stage,
		D3DTEXTURESTAGESTATETYPE Type,
		DWORD * pValue
	)
	{
		HRESULT hr = mRealDevice->GetTextureStageState(Stage, Type, pValue);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetTextureStageState(%d, %d, %d) == %d\n")
		.With(Stage).With(Type).With(pValue).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetTextureStageState
	(
		DWORD Stage,
		D3DTEXTURESTAGESTATETYPE Type,
		DWORD Value
	)
	{
		HRESULT hr = mRealDevice->SetTextureStageState(Stage, Type, Value);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetTextureStageState(%d, %d, %d) == %d\n")
		.With(Stage).With(Type).With(Value).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) ValidateDevice
	(
		DWORD * pNumPasses
	)
	{
		HRESULT hr = mRealDevice->ValidateDevice(pNumPasses);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::ValidateDevice(%d) == %d\n")
		.With(*pNumPasses).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	/**
	 * No D3D9 equivalent.            
	 */
	GEMCALL(HRESULT) GetInfo
	(
		DWORD DevInfoID,
		void * pDevInfoStruct,
		DWORD DevInfoStructSize
	)
	{
		//HRESULT hr = mRealDevice->GetInfo(DevInfoID, pDevInfoStruct, DevInfoStructSize);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetInfo(%d, %d, %d) == UNUSED\n")
		.With(DevInfoID).With(pDevInfoStruct).With(DevInfoStructSize).Done();
#endif

		return DefaultErrorCode;
	}

	GEMCALL(HRESULT) SetPaletteEntries
	(
		UINT PaletteNumber,
		CONST PALETTEENTRY * pEntries
	)
	{
		HRESULT hr = mRealDevice->SetPaletteEntries(PaletteNumber, pEntries);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetPaletteEntries(%d, %d) == %d\n")
		.With(PaletteNumber).With(pEntries).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) GetPaletteEntries
	(
		UINT PaletteNumber,
		PALETTEENTRY * pEntries
	)
	{
		HRESULT hr = mRealDevice->GetPaletteEntries(PaletteNumber, pEntries);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetPaletteEntries(%d, %d) == %d\n")
		.With(PaletteNumber).With(pEntries).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) SetCurrentTexturePalette
	(
		UINT PaletteNumber
	)
	{
		HRESULT hr = mRealDevice->SetCurrentTexturePalette(PaletteNumber);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetCurrentTexturePalette(%d) == %d\n")
		.With(PaletteNumber).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetCurrentTexturePalette
	(
		UINT * PaletteNumber
	)
	{
		HRESULT hr = mRealDevice->GetCurrentTexturePalette(PaletteNumber);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetCurrentTexturePalette(%d) == %d\n")
		.With(*PaletteNumber).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) DrawPrimitive
	(
		D3DPRIMITIVETYPE PrimitiveType,
		UINT StartVertex,
		UINT PrimitiveCount
	)
	{
		HRESULT hr = mRealDevice->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DrawPrimitive(%d, %d, %d) == %d\n")
		.With(PrimitiveType).With(StartVertex).With(PrimitiveCount)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	//! @todo Check the value of the start index in the D3D9 call.
	GEMCALL(HRESULT) DrawIndexedPrimitive
	(
		D3DPRIMITIVETYPE PrimitiveType,
		UINT minIndex,
		UINT NumVertices,
		UINT startIndex,
		UINT primCount
	)
	{
		HRESULT hr = mRealDevice->DrawIndexedPrimitive(PrimitiveType, 0, minIndex, NumVertices, startIndex, primCount);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DrawIndexedPrimitive(%d, %d, %d, %d, %d) == %d\n")
		.With(PrimitiveType).With(minIndex).With(NumVertices).With(startIndex).With(primCount)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) DrawPrimitiveUP
	(
		D3DPRIMITIVETYPE PrimitiveType,
		UINT PrimitiveCount,
		CONST void * pVertexStreamZeroData,
		UINT VertexStreamZeroStride
	)
	{
		HRESULT hr = mRealDevice->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DrawPrimitiveUP(%d, %d, %d, %d) == %d\n")
		.With(PrimitiveType).With(PrimitiveCount).With(pVertexStreamZeroData).With(VertexStreamZeroStride).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	GEMCALL(HRESULT) DrawIndexedPrimitiveUP
	(
		D3DPRIMITIVETYPE PrimitiveType,
		UINT MinVertexIndex,
		UINT NumVertexIndices,
		UINT PrimitiveCount,
		CONST void * pIndexData,
		D3DFORMAT IndexDataFormat,
		CONST void * pVertexStreamZeroData,
		UINT VertexStreamZeroStride
	)
	{
		HRESULT hr = mRealDevice->DrawIndexedPrimitiveUP
		(
			PrimitiveType, MinVertexIndex, NumVertexIndices, PrimitiveCount, pIndexData, 
			IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DrawIndexedPrimitiveUP(%d, %d, %d, %d, %d, %d, %d, %d) == %d\n")
		.With(PrimitiveType).With(MinVertexIndex).With(NumVertexIndices).With(PrimitiveCount)
		.With(pIndexData).With(IndexDataFormat).With(pVertexStreamZeroData).With(VertexStreamZeroStride)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	//! @todo Check the parameter of the vertex decl in the D3D9 call. Taken from MGE, so...
	GEMCALL(HRESULT) ProcessVertices
	(
		UINT SrcStartIndex,
		UINT DestIndex,
		UINT VertexCount,
		IDirect3DVertexBuffer8* pDestBuffer,
		DWORD Flags
	)
	{
		HRESULT hr = mRealDevice->ProcessVertices
		(
			SrcStartIndex, DestIndex, VertexCount,(IDirect3DVertexBuffer9*)pDestBuffer, NULL, Flags
		);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::ProcessVertices(%d, %d, %d, %d, %d) == %d\n")
		.With(SrcStartIndex).With(DestIndex).With(VertexCount).With(pDestBuffer).With(Flags)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) CreateVertexShader
	(
		CONST DWORD * pDeclaration,
		CONST DWORD * pFunction,
		DWORD * pHandle,
		DWORD Usage
	)
	{
		//! @todo Set this up to keep a running log of shaders (probably a 
		//!			std::set<IDirect3DVertexShader9**>).
		HRESULT hr = mRealDevice->CreateVertexShader(pFunction, (IDirect3DVertexShader9**)pHandle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreateVertexShader(%d, %d, %d, %d) == %d\n")
		.With(pDeclaration).With(pFunction).With(pHandle).With(Usage)
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		if ( SUCCEEDED(hr) )
		{
			mVertexShaders.insert(*pHandle);
		}

		return hr;
	}


	GEMCALL(HRESULT) SetVertexShader
	(
		DWORD Handle
	)
	{
		//! @todo Test the shader setup
		HRESULT hr = D3D_OK;

		if ( mVertexShaders.find(Handle) == mVertexShaders.end() )
		{
			// Not a shader, FVF
			hr = mRealDevice->SetFVF(Handle);
		} else {
			hr = mRealDevice->SetVertexShader((IDirect3DVertexShader9*)Handle);
		}

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetVertexShader(%d) == %d\n")
		.With(Handle).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


	GEMCALL(HRESULT) GetVertexShader
	(
		DWORD * pHandle
	)
	{
		HRESULT hr = mRealDevice->GetVertexShader((IDirect3DVertexShader9**)pHandle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetVertexShader(%d) == %d\n")
		.With(pHandle).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

	/**
	 * D3D9 has no equivalent function.            
	 */
	GEMCALL(HRESULT) DeleteVertexShader
	(
		DWORD Handle
	)
	{
		//HRESULT hr = mRealDevice->DeleteVertexShader(DWORD Handle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DeleteVertexShader(%d) == UNUSED\n")
		.With(Handle).Done();
#endif

		return DefaultErrorCode;
	}

	GEMCALL(HRESULT) SetVertexShaderConstant
	(
		DWORD Register,
		CONST void * pConstantData,
		DWORD ConstantCount
	)
	{
		HRESULT hr = mRealDevice->SetVertexShaderConstantF(Register, (const float*)pConstantData, ConstantCount);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetVertexShaderConstant(%d, %d, %d) == %d\n")
		.With(Register).With(pConstantData).With(ConstantCount).With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}

		GEMCALL(HRESULT) GetVertexShaderConstant
	(
		DWORD Register,void* pConstantData,DWORD ConstantCount
	)
	{
		HRESULT hr = mRealDevice->GetVertexShaderConstantF(DWORD Register,void* pConstantData,DWORD ConstantCount);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetVertexShaderConstant(DWORD Register,void* pConstantData,DWORD ConstantCount) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetVertexShaderDeclaration
	(
		DWORD Handle,void* pData,DWORD* pSizeOfData
	)
	{
		HRESULT hr = mRealDevice->GetVertexShaderDeclaration(DWORD Handle,void* pData,DWORD* pSizeOfData);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetVertexShaderDeclaration(DWORD Handle,void* pData,DWORD* pSizeOfData) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetVertexShaderFunction
	(
		DWORD Handle,void* pData,DWORD* pSizeOfData
	)
	{
		HRESULT hr = mRealDevice->GetVertexShaderFunction(DWORD Handle,void* pData,DWORD* pSizeOfData);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetVertexShaderFunction(DWORD Handle,void* pData,DWORD* pSizeOfData) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) SetStreamSource
	(
		UINT StreamNumber,IDirect3DVertexBuffer8* pStreamData,UINT Stride
	)
	{
		HRESULT hr = mRealDevice->SetStreamSource(UINT StreamNumber,IDirect3DVertexBuffer8* pStreamData,UINT Stride);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetStreamSource(UINT StreamNumber,IDirect3DVertexBuffer8* pStreamData,UINT Stride) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetStreamSource
	(
		UINT StreamNumber,IDirect3DVertexBuffer8** ppStreamData,UINT* pStride
	)
	{
		HRESULT hr = mRealDevice->GetStreamSource(UINT StreamNumber,IDirect3DVertexBuffer8** ppStreamData,UINT* pStride);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetStreamSource(UINT StreamNumber,IDirect3DVertexBuffer8** ppStreamData,UINT* pStride) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) SetIndices
	(
		IDirect3DIndexBuffer8* pIndexData,UINT BaseVertexIndex
	)
	{
		HRESULT hr = mRealDevice->SetIndices(IDirect3DIndexBuffer8* pIndexData,UINT BaseVertexIndex);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetIndices(IDirect3DIndexBuffer8* pIndexData,UINT BaseVertexIndex) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetIndices
	(
		IDirect3DIndexBuffer8** ppIndexData,UINT* pBaseVertexIndex
	)
	{
		HRESULT hr = mRealDevice->GetIndices(IDirect3DIndexBuffer8** ppIndexData,UINT* pBaseVertexIndex);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetIndices(IDirect3DIndexBuffer8** ppIndexData,UINT* pBaseVertexIndex) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) CreatePixelShader
	(
		CONST DWORD* pFunction,DWORD* pHandle
	)
	{
		HRESULT hr = mRealDevice->CreatePixelShader(CONST DWORD* pFunction,DWORD* pHandle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::CreatePixelShader(CONST DWORD* pFunction,DWORD* pHandle) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) SetPixelShader
	(
		DWORD Handle
	)
	{
		HRESULT hr = mRealDevice->SetPixelShader(DWORD Handle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetPixelShader(DWORD Handle) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetPixelShader
	(
		DWORD* pHandle
	)
	{
		HRESULT hr = mRealDevice->GetPixelShader(DWORD* pHandle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetPixelShader(DWORD* pHandle) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) DeletePixelShader
	(
		DWORD Handle
	)
	{
		HRESULT hr = mRealDevice->DeletePixelShader(DWORD Handle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DeletePixelShader(DWORD Handle) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) SetPixelShaderConstant
	(
		DWORD Register,CONST void* pConstantData,DWORD ConstantCount
	)
	{
		HRESULT hr = mRealDevice->SetPixelShaderConstant(DWORD Register,CONST void* pConstantData,DWORD ConstantCount);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::SetPixelShaderConstant(DWORD Register,CONST void* pConstantData,DWORD ConstantCount) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetPixelShaderConstant
	(
		DWORD Register,void* pConstantData,DWORD ConstantCount
	)
	{
		HRESULT hr = mRealDevice->GetPixelShaderConstant(DWORD Register,void* pConstantData,DWORD ConstantCount);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetPixelShaderConstant(DWORD Register,void* pConstantData,DWORD ConstantCount) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) GetPixelShaderFunction
	(
		DWORD Handle,void* pData,DWORD* pSizeOfData
	)
	{
		HRESULT hr = mRealDevice->GetPixelShaderFunction(DWORD Handle,void* pData,DWORD* pSizeOfData);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::GetPixelShaderFunction(DWORD Handle,void* pData,DWORD* pSizeOfData) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) DrawRectPatch
	(
		UINT Handle,CONST float* pNumSegs,CONST D3DRECTPATCH_INFO* pRectPatchInfo
	)
	{
		HRESULT hr = mRealDevice->DrawRectPatch(UINT Handle,CONST float* pNumSegs,CONST D3DRECTPATCH_INFO* pRectPatchInfo);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DrawRectPatch(UINT Handle,CONST float* pNumSegs,CONST D3DRECTPATCH_INFO* pRectPatchInfo) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) DrawTriPatch
	(
		UINT Handle,CONST float* pNumSegs,CONST D3DTRIPATCH_INFO* pTriPatchInfo
	)
	{
		HRESULT hr = mRealDevice->DrawTriPatch(UINT Handle,CONST float* pNumSegs,CONST D3DTRIPATCH_INFO* pTriPatchInfo);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DrawTriPatch(UINT Handle,CONST float* pNumSegs,CONST D3DTRIPATCH_INFO* pTriPatchInfo) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


		GEMCALL(HRESULT) DeletePatch
	(
		UINT Handle
	)
	{
		HRESULT hr = mRealDevice->DeletePatch(UINT Handle);

#ifdef _DEBUG
		VoodooCore->GetLog()->Format("Voodoo DX8.9: IVoodoo3DDevice8::DeletePatch(UINT Handle) == %d\n")
		.With(cgD3D9TranslateHRESULT(hr)).Done();
#endif

		return hr;
	}


};
